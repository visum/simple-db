{"version":3,"sources":["../../../src/tests/postgresql/TableCreator.js"],"names":["pool","Pool","host","user","password","database","port","otherTable","name","label","description","version","columns","type","primaryKeys","testSchema","isNullable","unique","foreignKeys","manyToOne","source","column","oneToOne","dropTablesAsync","TableCreator","dropTableIfExistsAsync","schema","exports","tableCreator","createTableIfNotExistsAsync","e","console","log","otherTableCreator"],"mappings":"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","sourcesContent":["import * as assert from \"assert\";\nimport TableCreator from \"../../postgresql/TableCreator\";\nimport { Pool } from \"pg\";\n\nconst pool = new Pool({\n  host: \"localhost\",\n  user: \"test_user\",\n  password: \"test_user_pass\",\n  database: \"tests\",\n  port: 5432\n});\n\nconst otherTable = {\n  name: \"other_table\",\n  label: \"Other Table\",\n  description: \"Some other great table\",\n  version: \"1.0.0\",\n  columns: [\n    {\n      type: \"INTEGER\",\n      name: \"id\",\n      label: \"Identifier\"\n    },\n    {\n      type: \"TEXT\",\n      name: \"text\",\n      label: \"Text\",\n      description: \"Some Description.\"\n    }\n  ],\n  primaryKeys: [\"id\"]\n};\n\nconst testSchema = {\n  name: \"table\",\n  label: \"Table\",\n  description: \"Some great description.\",\n  version: \"1.0.1\",\n  columns: [\n    {\n      type: \"INTEGER\",\n      name: \"id\",\n      label: \"Identifier\"\n    },\n    {\n      type: \"TEXT\",\n      name: \"text\",\n      label: \"Text\",\n      description: \"Some Description.\"\n    },\n    {\n      type: \"REAL\",\n      name: \"real\",\n      label: \"Float\",\n      isNullable: false\n    },\n    {\n      type: \"INTEGER\",\n      name: \"manyToOne\",\n      label: \"Many To One Identifier\",\n      isNullable: false\n    },\n    {\n      type: \"INTEGER\",\n      name: \"oneToOne\",\n      label: \"One to One Identifier\",\n      isNullable: false\n    }\n  ],\n  primaryKeys: [\"id\"],\n  unique: {},\n  foreignKeys: {\n    manyToOne: {\n      label: \"Source\",\n      source: {\n        name: \"other_table\",\n        version: \"1.0.0\",\n        label: \"Many\",\n        column: \"id\"\n      }\n    },\n    oneToOne: {\n      label: \"Source\",\n      source: {\n        name: \"other_table\",\n        version: \"1.0.0\",\n        label: \"One\",\n        column: \"id\"\n      }\n    }\n  }\n};\n\nconst dropTablesAsync = async () => {\n  await TableCreator.dropTableIfExistsAsync({\n    schema: testSchema,\n    database: pool\n  });\n  await TableCreator.dropTableIfExistsAsync({\n    schema: otherTable,\n    database: pool\n  });\n};\n\nexports['clean'] = dropTablesAsync;\n\nexports[\"TableCreator: createTableIfNotExistsAsync.\"] = async () => {\n  const tableCreator = new TableCreator({\n    schema: otherTable,\n    database: pool\n  });\n\n  try {\n    await tableCreator.createTableIfNotExistsAsync();\n  } catch (e) {\n    console.log(e);\n  }\n  return;\n};\n\nexports[\n  \"TableCreator: createTableIfNotExistsAsync with foreign keys.\"\n] = async () => {\n  const otherTableCreator = new TableCreator({\n    schema: otherTable,\n    database: pool\n  });\n\n  const tableCreator = new TableCreator({\n    schema: testSchema,\n    database: pool\n  });\n\n  await otherTableCreator.createTableIfNotExistsAsync();\n  return await tableCreator.createTableIfNotExistsAsync();\n};\n\nexports[\"TableCreator: createTableIfNotExistsAsync twice.\"] = async () => {\n  const tableCreator = new TableCreator({\n    schema: otherTable,\n    database: pool\n  });\n\n  await tableCreator.createTableIfNotExistsAsync();\n  return await tableCreator.createTableIfNotExistsAsync();\n};\n\nexports[\"TableCreator: createTableIfNotExistsAsync then Drop\"] = async () => {\n  const tableCreator = new TableCreator({\n    schema: otherTable,\n    database: pool\n  });\n\n  await tableCreator.createTableIfNotExistsAsync();\n  return await tableCreator.dropTableIfExistsAsync();\n};\n"],"file":"TableCreator.js"}