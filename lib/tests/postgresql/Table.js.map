{"version":3,"sources":["../../../src/tests/postgresql/Table.js"],"names":["pool","Pool","host","user","password","database","port","exports","table","Table","schema","personSchema","TableCreator","createTableIfNotExistsAsync","addAsync","firstName","john","where","column","isEqualTo","getFirstAsync","assert","equal","error","console","dropTableIfExistsAsync","id","updateAsync","jane","removeAsync","lifeCycleDelegate","prepareEntityToBeAddedAsync","entity","lastName","results","toArrayAsync","length","Error","message","called","canEntityBeAddedAsync","entityAddedAsync","prepareEntityToBeUpdatedAsync","fail","refineQueryable","queryable","or"],"mappings":"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","sourcesContent":["\nimport * as assert from \"assert\";\nimport {Pool} from \"pg\";\nimport Table from \"../../postgresql/Table\";\nimport personSchema from \"./testSchemas/person\";\nimport TableCreator from \"../../postgresql/TableCreator\";\n\nconst pool = new Pool({\n    host: \"localhost\",\n    user: \"test_user\",\n    password: \"test_user_pass\",\n    database: \"tests\",\n    port: 5432\n  });\n\nexports[\"Table: addAsync\"] = async () => {\n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n        const john = await table.where()\n            .column(\"firstName\")\n            .isEqualTo(\"John\")\n            .getFirstAsync();\n\n        assert.equal(john.firstName, \"John\");\n    }\n    catch(error) {\n        console.error(error);\n    } \n    finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n};\n\nexports[\"Table: updateAsync\"] = async () => {\n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n\n        const { id } = await table.addAsync({ firstName: \"John\" });\n\n        await table.updateAsync({\n            id: id,\n            firstName: \"Jane\"\n        });\n\n        const jane = await table.where()\n            .column(\"firstName\")\n            .isEqualTo(\"Jane\")\n            .getFirstAsync();\n\n        assert.equal(jane.firstName, \"Jane\");\n    } finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n\n};\n\nexports[\"Table: removeAsync\"] = async () => {\n\n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n\n        const { id } = await table.addAsync({ firstName: \"John\" });\n\n        await table.removeAsync({\n            id: id\n        });\n\n        const john = await table.where()\n            .column(\"firstName\")\n            .isEqualTo(\"John\")\n            .getFirstAsync();\n\n        assert.equal(john, null);\n    } finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n};\n\nexports[\"Table: prepareEntityToBeAddedAsync\"] = async () => {\n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                prepareEntityToBeAddedAsync: (entity) => {\n                    return {\n                        firstName: entity.firstName,\n                        lastName: \"Doe\"\n                    };\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n        await table.addAsync({ firstName: \"John\" });\n        const results = await table.where().column(\"lastName\").isEqualTo(\"Doe\").toArrayAsync();\n\n        assert.equal(results.length, 1);\n    } finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n};\n\nexports[\"Table: prepareEntityToBeAddedAsync:failed\"] = async () => {\n\n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                prepareEntityToBeAddedAsync: () => {\n                    throw new Error(\"Can't access database.\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n    } catch (error) {\n        assert.equal(error.message, \"Can't access database.\");\n    } finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n};\n\nexports[\"Table: canEntityBeAddedAsync\"] = async () => {\n    let called = false;\n\n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                canEntityBeAddedAsync: (entity) => {\n                    called = true;\n                    return true;\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n        assert.equal(called, true);\n\n    } catch (error) {\n        throw error;\n    } finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n};\n\nexports[\"Table: canEntityBeAddedAsync: failed\"] = async () => {\n\n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                canEntityBeAddedAsync: () => {\n                    throw new Error(\"John is already in database.\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n    } catch (error) {\n        assert.equal(error.message, \"John is already in database.\");\n    } finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n};\n\nexports[\"Table: entityAddedAsync\"] = async () => {\n    let called = false;\n\n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                entityAddedAsync: (entity) => {\n                    called = true;\n                    assert.equal(entity.firstName, \"John\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n        assert.equal(called, true);\n    } finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n};\n\nexports[\"Table: entityAddedAsync: failed\"] = async () => {\n    let called = false;\n\n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                entityAddedAsync: () => {\n                    called = true;\n                    throw new Error(\"Didn't complete task.\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n    } catch (error) {\n        assert.equal(called, true);\n        assert.equal(error.message, \"Didn't complete task.\");\n    } finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n\n};\n\nexports[\"Table: prepareEntityToBeUpdatedAsync\"] = async () => {\n\n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                prepareEntityToBeUpdatedAsync: (entity) => {\n                    // Override last name.\n                    entity.lastName = \"Doe\";\n                    return entity;\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n\n        const { id } = await table.addAsync({ firstName: \"John\" });\n\n        await table.updateAsync({\n            id: id,\n            lastName: \"Smith\"\n        });\n\n        const results = await table.where().column(\"lastName\").isEqualTo(\"Doe\").toArrayAsync();\n        assert.equal(results.length, 1);\n\n    } finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n};\n\nexports[\"Table: prepareEntityToBeUpdatedAsync: failed\"] = async () => {\n\n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                prepareEntityToBeUpdatedAsync: () => {\n                    throw new Error(\"Couldn't prepare entity.\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n\n\n        const { id } = await table.addAsync({ firstName: \"John\" });\n\n        await table.updateAsync({\n            id: id,\n            lastName: \"Smith\"\n        });\n\n        assert.fail(\"Expected to throw on prepareEntityToBeUpdatedAsync.\");\n    } catch (error) {\n        assert.equal(error.message, \"Couldn't prepare entity.\");\n    } finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n};\n\nexports[\"Table: refineQueryable\"] = async () => {\n    \n    try {\n        const table = new Table({\n            database: pool,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                refineQueryable: (queryable) => {\n                    return queryable.or().column(\"lastName\").isEqualTo(\"Doe\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\", lastName: \"Doe\" });\n        \n        const results = await table.where().column(\"firstName\").isEqualTo(\"Jane\").toArrayAsync();\n        \n        assert.equal(results.length, 1);\n\n    } finally {\n        await TableCreator.dropTableIfExistsAsync({\n            database: pool,\n            schema: personSchema\n        });\n    }\n};\n"],"file":"Table.js"}