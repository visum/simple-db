{"version":3,"sources":["../../../src/tests/postgresql/TableStatementCreator.js"],"names":["exports","schemaToPGFactory","SchemaToPGFactory","personSchema","createTableStatement","expectedSql","assert","equal","sql","addressSchema","phoneNumberSchema"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEAA,OAAO,CAAC,mCAAD,CAAP,GAA+C,MAAM;AACjD,QAAMC,iBAAiB,GAAG,IAAIC,8BAAJ,CAAsBC,eAAtB,CAA1B;AACA,QAAMC,oBAAoB,GAAGH,iBAAiB,CAACG,oBAAlB,EAA7B;AACA,QAAMC,WAAW,GAAI,sIAArB;AAEAC,EAAAA,MAAM,CAACC,KAAP,CAAaH,oBAAoB,CAACI,GAAlC,EAAuCH,WAAvC;AACH,CAND;;AAQAL,OAAO,CAAC,uCAAD,CAAP,GAAmD,MAAM;AACrD,QAAMC,iBAAiB,GAAG,IAAIC,8BAAJ,CAAsBO,gBAAtB,CAA1B;AACA,QAAML,oBAAoB,GAAGH,iBAAiB,CAACG,oBAAlB,EAA7B;AACA,QAAMC,WAAW,GAAI,sOAArB;AAEAC,EAAAA,MAAM,CAACC,KAAP,CAAaH,oBAAoB,CAACI,GAAlC,EAAuCH,WAAvC;AACH,CAND;;AAQAL,OAAO,CAAC,4CAAD,CAAP,GAAwD,MAAM;AAC1D,QAAMC,iBAAiB,GAAG,IAAIC,8BAAJ,CAAsBQ,oBAAtB,CAA1B;AACA,QAAMN,oBAAoB,GAAGH,iBAAiB,CAACG,oBAAlB,EAA7B;AACA,QAAMC,WAAW,GAAI,8MAArB;AAEAC,EAAAA,MAAM,CAACC,KAAP,CAAaH,oBAAoB,CAACI,GAAlC,EAAuCH,WAAvC;AACH,CAND","sourcesContent":["import * as assert from \"assert\";\nimport SchemaToPGFactory from \"../../postgresql/statements/TableStatementCreator\"\nimport personSchema from \"./testSchemas/person\";\nimport addressSchema from \"./testSchemas/address\";\nimport phoneNumberSchema from \"./testSchemas/phoneNumber\";\n\nexports[\"SchemaToPGFactory: Person Schema.\"] = () => {\n    const schemaToPGFactory = new SchemaToPGFactory(personSchema);\n    const createTableStatement = schemaToPGFactory.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"person_0.0.1\" (\"id\" SERIAL, \"firstName\" TEXT, \"lastName\" TEXT, \"dateOfBirth\" INTEGER, PRIMARY KEY(\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};\n\nexports[\"PG SchemaToPGFactory: Address Schema.\"] = () => {\n    const schemaToPGFactory = new SchemaToPGFactory(addressSchema);\n    const createTableStatement = schemaToPGFactory.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"address_0.0.1\" (\"id\" SERIAL, \"address\" TEXT, \"city\" TEXT, \"state\" INTEGER, \"zipCode\" INTEGER, \"personId\" INTEGER NOT NULL, PRIMARY KEY(\"id\"), FOREIGN KEY (\"personId\") REFERENCES \"person_0.0.1\" (\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};\n\nexports[\"PG SchemaToPGFactory: Phone Number Schema.\"] = () => {\n    const schemaToPGFactory = new SchemaToPGFactory(phoneNumberSchema);\n    const createTableStatement = schemaToPGFactory.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"address_0.0.1\" (\"id\" SERIAL, \"type\" TEXT, \"personId\" INTEGER NOT NULL, PRIMARY KEY(\"id\"), UNIQUE (\"personId\",\"type\"), FOREIGN KEY (\"personId\") REFERENCES \"person_0.0.1\" (\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};"],"file":"TableStatementCreator.js"}