{"version":3,"sources":["../../../src/tests/sqlite/SelectStatementCreator.js"],"names":["exports","queryable","Queryable","query","type","column","isEqualTo","selectStatementCreator","SelectStatementCreator","sql","createStatement","expected","assert","equal","isNotEqualTo","contains","startsWith","endsWith","isGreaterThan","isGreaterThanOrEqualTo","isLessThan","isLessThanOrEqualTo","isIn","isNotIn","select","id","rootQueryable"],"mappings":"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","sourcesContent":["import * as assert from \"assert\";\nimport SelectStatementCreator from \"../../sqlite/statements/SelectStatementCreator\";\nimport Queryable from \"../../queryable/Queryable\";\n\n\nexports[\"SelectStatementCreator: isEqualTo.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isEqualTo(\"value\");\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" = 'value' LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isNotEqualTo.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isNotEqualTo(\"value\");\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" != 'value' LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: contains.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").contains(\"value\");\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" LIKE '%value%' ESCAPE '\\\\' LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: startsWith.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").startsWith(\"value\");\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" LIKE 'value%' ESCAPE '\\\\' LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: endsWith.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").endsWith(\"value\");\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" LIKE '%value' ESCAPE '\\\\' LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isGreaterThan.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isGreaterThan(0);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" > 0 LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isGreaterThanOrEqualTo.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isGreaterThanOrEqualTo(0);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" >= 0 LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isLessThan.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isLessThan(0);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" < 0 LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isLessThanOrEqualTo.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isLessThanOrEqualTo(0);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" <= 0 LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isIn with array.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isIn([\"John\", \"Jane\"]);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" IN ('John', 'Jane') LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isNotIn with array.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isNotIn([\"John\", \"Jane\"]);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" NOT IN ('John', 'Jane') LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\n\nexports[\"SelectStatementCreator: isIn with queryable.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"other_table\" } }).select({ id: \"id\" });\n    const rootQueryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isIn(queryable);\n    const selectStatementCreator = new SelectStatementCreator(rootQueryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" IN (SELECT id AS id FROM \"other_table\" LIMIT -1 OFFSET 0) LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isNotIn with queryable.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"other_table\" } }).select({ id: \"id\" });\n    const rootQueryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isNotIn(queryable);\n    const selectStatementCreator = new SelectStatementCreator(rootQueryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" NOT IN (SELECT id AS id FROM \"other_table\" LIMIT -1 OFFSET 0) LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}"],"file":"SelectStatementCreator.js"}