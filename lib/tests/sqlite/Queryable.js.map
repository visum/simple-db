{"version":3,"sources":["../../../src/tests/sqlite/Queryable.js"],"names":["createDatabaseAsync","database","TableCreator","createTableIfNotExistsAsync","schema","testSchema","fillDatabaseAsync","table","tests","x","testsPromise","addAsync","firstName","push","Promise","all","exports","sqlite","Database","Table","results","where","column","endsWith","or","startsWith","and","contains","orderByDesc","toArrayAsync","assert","equal","length","removeAsync","error","close","isIn","select","take","result","getFirstAsync","updateAsync","count","getCountAsync","queryable","Queryable","query","type","json","isEqualTo","toJson","roleQueryable","id","queryable2","fromJson","json2"],"mappings":"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","sourcesContent":["import * as assert from \"assert\";\nimport sqlite from \"sqlite3\";\nimport Table from \"../../sqlite/Table\";\nimport testSchema from \"./testSchemas/person\";\nimport TableCreator from \"../../sqlite/TableCreator\";\nimport Queryable from \"../../../lib/queryable/Queryable\";\n\nconst createDatabaseAsync = (database) => {\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: testSchema\n    });\n}\n\nconst fillDatabaseAsync = (table) => {\n    const tests = [];\n\n    for (let x = 0; x < 300; x++) {\n        const testsPromise = table.addAsync({\n            firstName: `John_${x}_`\n        });\n        tests.push(testsPromise);\n    }\n\n    return Promise.all(tests);\n\n}\n\nexports[\"Queryable: toArrayAsync.\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        await createDatabaseAsync(database);\n\n        const table = new Table({\n            database,\n            schema: testSchema\n        });\n\n        await fillDatabaseAsync(table);\n\n        let results = await table.where()\n            .column(\"firstName\")\n            .endsWith(\"ohn_1_\")\n            .or()\n            .column(\"firstName\")\n            .startsWith(\"John_2_\")\n            .and()\n            .column(\"firstName\")\n            .contains(\"John\")\n            .orderByDesc(\"id\")\n            .toArrayAsync();\n\n        assert.equal(results.length, 2);\n\n        await table.where()\n            .column(\"firstName\")\n            .contains(\"John\")\n            .removeAsync();\n\n        results = await table.where().toArrayAsync();\n        assert.equal(results.length, 0);\n    } catch (error) {\n        throw error;\n    } finally {\n        database.close();\n    }\n\n};\n\nexports[\"Queryable: IsIn with Queryable.\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        await createDatabaseAsync(database);\n\n        const table = new Table({\n            database,\n            schema: testSchema\n        });\n\n        await fillDatabaseAsync(table);\n        \n        const results = await table.where()\n            .column(\"firstName\")\n            .isIn(table.where().select({ \"firstName\": \"firstName\" }).take(1))\n            .toArrayAsync();\n\n        assert.equal(results.length, 1);\n\n    } catch (error) {\n        throw error;\n    } finally {\n        database.close();\n    }\n\n};\n\nexports[\"Queryable: IsIn with Array.\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        await createDatabaseAsync(database);\n\n        const table = new Table({\n            database,\n            schema: testSchema\n        });\n\n        await fillDatabaseAsync(table);\n\n        const results = await table.where()\n            .column(\"firstName\")\n            .isIn([`John_1_`])\n            .toArrayAsync();\n\n        assert.equal(results.length, 1);\n\n    } catch (error) {\n        throw error;\n    } finally {\n        database.close();\n    }\n\n};\n\nexports[\"Queryable: getFirstAsync\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        await createDatabaseAsync(database);\n\n        const table = new Table({\n            database,\n            schema: testSchema\n        });\n\n        await fillDatabaseAsync(table);\n\n        const result = await table.where()\n            .column(\"firstName\")\n            .endsWith(\"_1_\")\n            .getFirstAsync();\n\n        assert.equal(result != null, true);\n\n    } catch (error) {\n        throw error;\n    } finally {\n        database.close();\n    }\n\n};\n\nexports[\"Queryable: removeAsync\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n    try {\n        await createDatabaseAsync(database);\n\n        const table = new Table({\n            database,\n            schema: testSchema\n        });\n\n        await fillDatabaseAsync(table);\n\n        await table.where()\n            .column(\"firstName\")\n            .contains(\"John\")\n            .removeAsync();\n        const results = await table.where().toArrayAsync();\n\n        assert.equal(results.length, 0);\n\n    } catch (error) {\n        throw error;\n    } finally {\n        database.close();\n    }\n};\n\nexports[\"Queryable: updateAsync\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n    try {\n        await createDatabaseAsync(database);\n\n        const table = new Table({\n            database,\n            schema: testSchema\n        });\n\n        await fillDatabaseAsync(table);\n        await table.where()\n            .column(\"firstName\")\n            .endsWith(\"hn_1_\")\n            .updateAsync({\n                firstName: \"Jane\"\n            });\n\n        const results = await table.where()\n            .column(\"firstName\")\n            .endsWith(\"Jane\")\n            .toArrayAsync();\n\n        assert.equal(results[0].firstName, \"Jane\");\n\n    } catch (error) {\n        throw error;\n    } finally {\n        database.close();\n    }\n};\n\nexports[\"Queryable: getCountAsync\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        await createDatabaseAsync(database);\n\n        const table = new Table({\n            database,\n            schema: testSchema\n        });\n\n        await fillDatabaseAsync(table);\n\n        const count = await table.where()\n            .column(\"firstName\")\n            .contains(\"John\")\n            .getCountAsync();\n\n        assert.equal(count, 300);\n\n    } catch (error) {\n        throw error;\n    } finally {\n        database.close();\n    }\n};\n\nexports[\"Queryable: toJson\"] = function () {\n    const queryable = new Queryable({ query: { type: \"person\" } });\n    const json = queryable.column(\"firstName\").isEqualTo(\"Joe\").toJson();\n\n    assert.equal(json, `{\"type\":\"person\",\"expression\":{\"type\":\"isEqualTo\",\"isComposite\":true,\"children\":[{\"type\":\"property\",\"isComposite\":true,\"children\":[{\"type\":\"type\",\"isComposite\":false,\"value\":\"person\"},{\"type\":\"propertyName\",\"isComposite\":false,\"value\":\"firstName\"}]},{\"type\":\"string\",\"isComposite\":false,\"value\":\"Joe\"}]},\"select\":{},\"limit\":-1,\"offset\":0,\"orderBy\":[]}`);\n};\n\nexports[\"Queryable: fromJson\"] = function () {\n    const queryable = new Queryable({ query: { type: \"person\" } });\n    const roleQueryable = new Queryable({ query: { type: \"role\" } }).column(\"name\").isEqualTo(\"admin\").select({ id: \"id\" });\n\n    const json = queryable.column(\"firstName\").isEqualTo(\"Joe\").and().column(\"roleId\").isIn(roleQueryable).toJson();\n\n    const queryable2 = Queryable.fromJson(json);\n    const json2 = queryable2.toJson();\n\n    assert.equal(json, json2);\n};\n"],"file":"Queryable.js"}