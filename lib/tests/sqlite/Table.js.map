{"version":3,"sources":["../../../src/tests/sqlite/Table.js"],"names":["exports","database","sqlite","Database","table","Table","schema","personSchema","TableCreator","createTableIfNotExistsAsync","addAsync","firstName","john","where","column","isEqualTo","getFirstAsync","assert","equal","close","lastID","id","updateAsync","jane","removeAsync","lifeCycleDelegate","prepareEntityToBeAddedAsync","entity","lastName","results","toArrayAsync","length","Error","error","message","called","canEntityBeAddedAsync","entityAddedAsync","prepareEntityToBeUpdatedAsync","fail","refineQueryable","queryable","or"],"mappings":"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","sourcesContent":["\nimport * as assert from \"assert\";\nimport sqlite from \"sqlite3\";\nimport Table from \"../../sqlite/Table\";\nimport personSchema from \"./testSchemas/person\";\nimport TableCreator from \"../../sqlite/TableCreator\";\n\nexports[\"Table: addAsync\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n        const john = await table.where()\n            .column(\"firstName\")\n            .isEqualTo(\"John\")\n            .getFirstAsync();\n\n        assert.equal(john.firstName, \"John\");\n    } finally {\n        database.close();\n    }\n};\n\nexports[\"Table: updateAsync\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n\n        const { lastID: id } = await table.addAsync({ firstName: \"John\" });\n\n        await table.updateAsync({\n            id: id,\n            firstName: \"Jane\"\n        });\n\n        const jane = await table.where()\n            .column(\"firstName\")\n            .isEqualTo(\"Jane\")\n            .getFirstAsync();\n\n        assert.equal(jane.firstName, \"Jane\");\n    } finally {\n        database.close();\n    }\n\n};\n\nexports[\"Table: removeAsync\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n\n        const { lastID: id } = await table.addAsync({ firstName: \"John\" });\n\n        await table.removeAsync({\n            id: id\n        });\n\n        const john = await table.where()\n            .column(\"firstName\")\n            .isEqualTo(\"John\")\n            .getFirstAsync();\n\n        assert.equal(john, null);\n    } finally {\n        database.close();\n    }\n};\n\nexports[\"Table: prepareEntityToBeAddedAsync\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                prepareEntityToBeAddedAsync: (entity) => {\n                    return {\n                        firstName: entity.firstName,\n                        lastName: \"Doe\"\n                    };\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n        await table.addAsync({ firstName: \"John\" });\n        const results = await table.where().column(\"lastName\").isEqualTo(\"Doe\").toArrayAsync();\n\n        assert.equal(results.length, 1);\n    } finally {\n        database.close();\n    }\n};\n\nexports[\"Table: prepareEntityToBeAddedAsync:failed\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                prepareEntityToBeAddedAsync: () => {\n                    throw new Error(\"Can't access database.\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n    } catch (error) {\n        assert.equal(error.message, \"Can't access database.\");\n    } finally {\n        database.close();\n\n    }\n};\n\nexports[\"Table: canEntityBeAddedAsync\"] = async () => {\n    let called = false;\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                canEntityBeAddedAsync: (entity) => {\n                    called = true;\n                    return true;\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n        assert.equal(called, true);\n\n    } catch (error) {\n        throw error;\n    } finally {\n        database.close();\n    }\n};\n\nexports[\"Table: canEntityBeAddedAsync: failed\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                canEntityBeAddedAsync: () => {\n                    throw new Error(\"John is already in database.\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n    } catch (error) {\n        assert.equal(error.message, \"John is already in database.\");\n    } finally {\n        database.close();\n    }\n};\n\nexports[\"Table: entityAddedAsync\"] = async () => {\n    let called = false;\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                entityAddedAsync: (entity) => {\n                    called = true;\n                    assert.equal(entity.firstName, \"John\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n        assert.equal(called, true);\n    } finally {\n        database.close();\n    }\n};\n\nexports[\"Table: entityAddedAsync: failed\"] = async () => {\n    let called = false;\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                entityAddedAsync: () => {\n                    called = true;\n                    throw new Error(\"Didn't complete task.\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\" });\n\n    } catch (error) {\n        assert.equal(called, true);\n        assert.equal(error.message, \"Didn't complete task.\");\n    } finally {\n        database.close();\n    }\n\n};\n\nexports[\"Table: prepareEntityToBeUpdatedAsync\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                prepareEntityToBeUpdatedAsync: (entity) => {\n                    // Override last name.\n                    entity.lastName = \"Doe\";\n                    return entity;\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n\n        const { lastID } = await table.addAsync({ firstName: \"John\" });\n\n        await table.updateAsync({\n            id: lastID,\n            lastName: \"Smith\"\n        });\n\n        const results = await table.where().column(\"lastName\").isEqualTo(\"Doe\").toArrayAsync();\n        assert.equal(results.length, 1);\n\n    } finally {\n        database.close();\n    }\n};\n\nexports[\"Table: prepareEntityToBeUpdatedAsync: failed\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                prepareEntityToBeUpdatedAsync: () => {\n                    throw new Error(\"Couldn't prepare entity.\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n\n\n        const { lastID } = await table.addAsync({ firstName: \"John\" });\n\n        await table.updateAsync({\n            id: lastID,\n            lastName: \"Smith\"\n        });\n\n        assert.fail(\"Expected to throw on prepareEntityToBeUpdatedAsync.\");\n    } catch (error) {\n        assert.equal(error.message, \"Couldn't prepare entity.\");\n    } finally {\n        database.close();\n    }\n};\n\nexports[\"Table: refineQueryable\"] = async () => {\n    const database = new sqlite.Database(\":memory:\");\n    try {\n        const table = new Table({\n            database,\n            schema: personSchema,\n            lifeCycleDelegate: {\n                refineQueryable: (queryable) => {\n                    return queryable.or().column(\"lastName\").isEqualTo(\"Doe\");\n                }\n            }\n        });\n\n        await TableCreator.createTableIfNotExistsAsync({\n            database,\n            schema: personSchema\n        });\n\n        await table.addAsync({ firstName: \"John\", lastName: \"Doe\" });\n        \n        const results = await table.where().column(\"firstName\").isEqualTo(\"Jane\").toArrayAsync();\n        \n        assert.equal(results.length, 1);\n\n    } finally {\n        database.close();\n    }\n};\n"],"file":"Table.js"}