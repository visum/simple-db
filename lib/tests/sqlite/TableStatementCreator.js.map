{"version":3,"sources":["../../../src/tests/sqlite/TableStatementCreator.js"],"names":["exports","schemaToSqliteFactory","SchemaToSqliteFactory","personSchema","createTableStatement","expectedSql","assert","equal","sql","addressSchema","phoneNumberSchema"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEAA,OAAO,CAAC,uCAAD,CAAP,GAAmD,MAAM;AACrD,QAAMC,qBAAqB,GAAG,IAAIC,8BAAJ,CAA0BC,eAA1B,CAA9B;AACA,QAAMC,oBAAoB,GAAGH,qBAAqB,CAACG,oBAAtB,EAA7B;AACA,QAAMC,WAAW,GAAI,uIAArB;AAEAC,EAAAA,MAAM,CAACC,KAAP,CAAaH,oBAAoB,CAACI,GAAlC,EAAuCH,WAAvC;AACH,CAND;;AAQAL,OAAO,CAAC,wCAAD,CAAP,GAAoD,MAAM;AACtD,QAAMC,qBAAqB,GAAG,IAAIC,8BAAJ,CAA0BO,gBAA1B,CAA9B;AACA,QAAML,oBAAoB,GAAGH,qBAAqB,CAACG,oBAAtB,EAA7B;AACA,QAAMC,WAAW,GAAI,uOAArB;AAEAC,EAAAA,MAAM,CAACC,KAAP,CAAaH,oBAAoB,CAACI,GAAlC,EAAuCH,WAAvC;AACH,CAND;;AAQAL,OAAO,CAAC,6CAAD,CAAP,GAAyD,MAAM;AAC3D,QAAMC,qBAAqB,GAAG,IAAIC,8BAAJ,CAA0BQ,oBAA1B,CAA9B;AACA,QAAMN,oBAAoB,GAAGH,qBAAqB,CAACG,oBAAtB,EAA7B;AACA,QAAMC,WAAW,GAAI,+MAArB;AAEAC,EAAAA,MAAM,CAACC,KAAP,CAAaH,oBAAoB,CAACI,GAAlC,EAAuCH,WAAvC;AACH,CAND","sourcesContent":["import * as assert from \"assert\";\nimport SchemaToSqliteFactory from \"../../sqlite/statements/TableStatementCreator\"\nimport personSchema from \"./testSchemas/person\";\nimport addressSchema from \"./testSchemas/address\";\nimport phoneNumberSchema from \"./testSchemas/phoneNumber\";\n\nexports[\"SchemaToSqliteFactory: Person Schema.\"] = () => {\n    const schemaToSqliteFactory = new SchemaToSqliteFactory(personSchema);\n    const createTableStatement = schemaToSqliteFactory.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"person_0.0.1\" (\"id\" INTEGER, \"firstName\" TEXT, \"lastName\" TEXT, \"dateOfBirth\" INTEGER, PRIMARY KEY(\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};\n\nexports[\"SchemaToSqliteFactory: Address Schema.\"] = () => {\n    const schemaToSqliteFactory = new SchemaToSqliteFactory(addressSchema);\n    const createTableStatement = schemaToSqliteFactory.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"address_0.0.1\" (\"id\" INTEGER, \"address\" TEXT, \"city\" TEXT, \"state\" INTEGER, \"zipCode\" INTEGER, \"personId\" INTEGER NOT NULL, PRIMARY KEY(\"id\"), FOREIGN KEY (\"personId\") REFERENCES \"person_0.0.1\" (\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};\n\nexports[\"SchemaToSqliteFactory: Phone Number Schema.\"] = () => {\n    const schemaToSqliteFactory = new SchemaToSqliteFactory(phoneNumberSchema);\n    const createTableStatement = schemaToSqliteFactory.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"address_0.0.1\" (\"id\" INTEGER, \"type\" TEXT, \"personId\" INTEGER NOT NULL, PRIMARY KEY(\"id\"), UNIQUE (\"personId\",\"type\"), FOREIGN KEY (\"personId\") REFERENCES \"person_0.0.1\" (\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};"],"file":"TableStatementCreator.js"}