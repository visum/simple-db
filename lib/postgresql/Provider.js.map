{"version":3,"sources":["../../src/postgresql/Provider.js"],"names":["Provider","constructor","database","lifeCycleDelegate","Error","pgDatabaseWrapper","PgWrapper","_prepareQueryable","queryable","_safelyRefineQueryable","alteredQueryable","Queryable","error","toArrayAsync","sql","SelectStatementCreator","createStatement","allAsync","getFirstAsync","results","getCountAsync","CountStatementCreator","getSqlAndValues","removeAsync","DeleteWhereStatementCreator","result","updateAsync","updates","values","UpdateWhereStatementCreator","runAsync"],"mappings":"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","sourcesContent":["import SelectStatementCreator from \"./statements/SelectStatementCreator\";\nimport PgWrapper from \"./PgWrapper\";\nimport CountStatementCreator from \"./statements/CountStatementCreator\";\nimport DeleteWhereStatementCreator from \"./statements/DeleteWhereStatementCreator\";\nimport UpdateWhereStatementCreator from \"./statements/UpdateWhereStatementCreator\";\nimport Queryable from \"../../lib/queryable/Queryable\";\nimport invokeMethodAsync from \"./utils/invokeMethodAsync\";\nimport invokeMethod from \"./utils/invokeMethod\";\n\nexport default class Provider {\n    constructor({\n        database,\n        lifeCycleDelegate\n    }) {\n        if (database == null) {\n            throw new Error(\"Null Exception: database cannot be null.\");\n        }\n\n        this.database = database;\n        this.pgDatabaseWrapper = new PgWrapper(this.database);\n        this.lifeCycleDelegate = lifeCycleDelegate;\n    }\n\n    async _prepareQueryable(queryable) {\n        await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"canQueryAsync\",\n            [queryable]\n        );\n\n        return this._safelyRefineQueryable(queryable);\n    }\n\n    _safelyRefineQueryable(queryable) {\n        try {\n            const alteredQueryable = invokeMethod(\n                this.lifeCycleDelegate,\n                \"refineQueryable\",\n                [queryable],\n                queryable\n            );\n\n            if (!(alteredQueryable instanceof Queryable)) {\n                throw new Error(\"Expected to have a queryable returned on refine Queryable.\");\n            }\n\n            return alteredQueryable;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async toArrayAsync(queryable) {\n        queryable = await this._prepareQueryable(queryable);\n        const { sql } = SelectStatementCreator.createStatement(queryable);\n        return await this.pgDatabaseWrapper.allAsync(sql);\n    }\n\n    async getFirstAsync(queryable) {\n        const results = await this.toArrayAsync(queryable);\n        return results[0] || null\n    }\n\n    async getCountAsync(queryable) {\n        queryable = await this._prepareQueryable(queryable);\n\n        const { sql } = CountStatementCreator.createStatement(queryable);\n        const results = await this.pgDatabaseWrapper.allAsync(sql);\n\n        return results[0][\"count\"];\n    }\n\n    getSqlAndValues(queryable) {\n        queryable = this._safelyRefineQueryable(queryable);\n\n        return SelectStatementCreator.createStatement(queryable);\n    }\n\n    async removeAsync(queryable) {\n        await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"canEntitiesBeRemovedAsync\",\n            [queryable]\n        );\n\n        queryable = await this._prepareQueryable(queryable);\n\n        const { sql } = DeleteWhereStatementCreator.createStatement(queryable);\n        const result = await this.pgDatabaseWrapper.allAsync(sql);\n\n        await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"entitiesRemovedAsync\",\n            [queryable, result]\n        );\n\n        return result;\n    }\n\n    async updateAsync(queryable, updates) {\n        await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"canEntitiesBeUpdatedAsync\",\n            [queryable]\n        );\n\n        queryable = await this._prepareQueryable(queryable);\n\n        const { sql, values } = UpdateWhereStatementCreator.createStatement(queryable, updates);\n        const result = await this.pgDatabaseWrapper.runAsync(sql, values);\n\n        await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"entitiesUpdatedAsync\",\n            [queryable, result]\n        );\n\n        return result;\n    }\n\n}"],"file":"Provider.js"}