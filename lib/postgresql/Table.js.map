{"version":3,"sources":["../../src/postgresql/Table.js"],"names":["Table","constructor","database","schema","lifeCycleDelegate","name","SchemaUtils","getTableNameFromSchema","pgDatabaseWrapper","PgWrapper","primaryKeys","addAsync","entity","alteredEntity","sql","values","InsertStatementCreator","createStatement","tableName","result","runAsync","inserted","rows","removeAsync","DeleteStatementCreator","updateAsync","UpdateStatementCreator","getQueryProvider","Provider","where","provider","Queryable","query","type","expression","select","limit","offset","orderBy"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEe,MAAMA,KAAN,CAAY;AACvBC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,GAAD,EAA0C;AAEjD,QAAIA,iBAAiB,IAAI,IAArB,IAA6B,OAAOA,iBAAP,KAA6B,QAA9D,EAAwE;AACpEA,MAAAA,iBAAiB,GAAG,EAApB;AACH;;AAED,SAAKC,IAAL,GAAYC,qBAAYC,sBAAZ,CAAmCJ,MAAnC,CAAZ;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKM,iBAAL,GAAyB,IAAIC,kBAAJ,CAAc,KAAKP,QAAnB,CAAzB;AACA,SAAKQ,WAAL,GAAmBP,MAAM,CAACO,WAA1B;AACA,SAAKN,iBAAL,GAAyBA,iBAAzB;AACH;;AAED,QAAMO,QAAN,CAAeC,MAAf,EAAuB;AAEnB,UAAM,gCACF,KAAKR,iBADH,EAEF,uBAFE,EAGF,CAACQ,MAAD,CAHE,EAIF,IAJE,CAAN;AAOA,UAAMC,aAAa,GAAG,MAAM,gCACxB,KAAKT,iBADmB,EAExB,6BAFwB,EAGxB,CAACQ,MAAD,CAHwB,EAIxBA,MAJwB,CAA5B;;AAOA,UAAM;AAAEE,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAkBC,gCAAuBC,eAAvB,CAAuC;AAC3DC,MAAAA,SAAS,EAAE,KAAKb,IAD2C;AAE3DO,MAAAA,MAAM,EAAEC,aAFmD;AAG3DH,MAAAA,WAAW,EAAE,KAAKA;AAHyC,KAAvC,CAAxB;;AAMA,UAAMS,MAAM,GAAG,MAAM,KAAKX,iBAAL,CAAuBY,QAAvB,CAAgCN,GAAhC,EAAqCC,MAArC,CAArB;AAEA,UAAMM,QAAQ,GAAGF,MAAM,CAACG,IAAP,CAAY,CAAZ,CAAjB;AAEA,WAAO,MAAM,gCACT,KAAKlB,iBADI,EAET,kBAFS,EAGT,CAACS,aAAD,EAAgBQ,QAAhB,CAHS,EAITA,QAJS,CAAb;AAOH;;AAED,QAAME,WAAN,CAAkBX,MAAlB,EAA0B;AAEtB,UAAM,gCACF,KAAKR,iBADH,EAEF,yBAFE,EAGF,CAACQ,MAAD,CAHE,EAIF,IAJE,CAAN;AAOA,UAAMC,aAAa,GAAG,MAAM,gCACxB,KAAKT,iBADmB,EAExB,+BAFwB,EAGxB,CAACQ,MAAD,CAHwB,EAIxBA,MAJwB,CAA5B;;AAOA,UAAM;AAAEE,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAkBS,gCAAuBP,eAAvB,CAAuC;AAC3DC,MAAAA,SAAS,EAAE,KAAKb,IAD2C;AAE3DO,MAAAA,MAAM,EAAEC,aAFmD;AAG3DH,MAAAA,WAAW,EAAE,KAAKA;AAHyC,KAAvC,CAAxB;;AAMA,UAAMS,MAAM,GAAG,MAAM,KAAKX,iBAAL,CAAuBY,QAAvB,CAAgCN,GAAhC,EAAqCC,MAArC,CAArB;AAEA,WAAO,gCACH,KAAKX,iBADF,EAEH,oBAFG,EAGH,CAACS,aAAD,EAAgBM,MAAhB,CAHG,EAIHA,MAJG,CAAP;AAOH;;AAED,QAAMM,WAAN,CAAkBb,MAAlB,EAA0B;AACtB,UAAM,gCACF,KAAKR,iBADH,EAEF,yBAFE,EAGF,CAACQ,MAAD,CAHE,EAIF,IAJE,CAAN;AAOA,UAAMC,aAAa,GAAG,MAAM,gCACxB,KAAKT,iBADmB,EAExB,+BAFwB,EAGxB,CAACQ,MAAD,CAHwB,EAIxBA,MAJwB,CAA5B;;AAOA,UAAM;AAAEE,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAkBW,gCAAuBT,eAAvB,CAAuC;AAC3DC,MAAAA,SAAS,EAAE,KAAKb,IAD2C;AAE3DO,MAAAA,MAAM,EAAEC,aAFmD;AAG3DH,MAAAA,WAAW,EAAE,KAAKA;AAHyC,KAAvC,CAAxB;;AAMA,UAAMS,MAAM,GAAG,MAAM,KAAKX,iBAAL,CAAuBY,QAAvB,CAAgCN,GAAhC,EAAqCC,MAArC,CAArB;AAEA,WAAO,MAAM,gCACT,KAAKX,iBADI,EAET,oBAFS,EAGT,CAACS,aAAD,EAAgBM,MAAhB,CAHS,EAITA,MAJS,CAAb;AAOH;;AAEDQ,EAAAA,gBAAgB,GAAG;AACf,WAAO,IAAIC,iBAAJ,CAAa;AAChB1B,MAAAA,QAAQ,EAAE,KAAKA,QADC;AAEhBE,MAAAA,iBAAiB,EAAE,KAAKA;AAFR,KAAb,CAAP;AAIH;;AAEDyB,EAAAA,KAAK,GAAG;AACJ,UAAMC,QAAQ,GAAG,KAAKH,gBAAL,EAAjB;AAEA,WAAO,IAAII,kBAAJ,CAAc;AACjBC,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE,KAAK5B,IADR;AAEH6B,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,MAAM,EAAE,EAHL;AAIHC,QAAAA,KAAK,EAAE,KAJJ;AAKHC,QAAAA,MAAM,EAAE,CALL;AAMHC,QAAAA,OAAO,EAAE;AANN,OADU;AASjBR,MAAAA,QAAQ,EAAEA;AATO,KAAd,CAAP;AAWH;;AAvIsB","sourcesContent":["import Provider from \"./Provider\";\nimport Queryable from \"../queryable/Queryable\";\nimport PgWrapper from \"./PgWrapper\";\nimport InsertStatementCreator from \"./statements/InsertStatementCreator\";\nimport UpdateStatementCreator from \"./statements/UpdateStatementCreator\";\nimport DeleteStatementCreator from \"./statements/DeleteStatementCreator\";\nimport SchemaUtils from \"./utils/SchemaUtils\";\nimport invokeMethodAsync from \"./utils/invokeMethodAsync\";\n\nexport default class Table {\n    constructor({ database, schema, lifeCycleDelegate }) {\n\n        if (lifeCycleDelegate == null || typeof lifeCycleDelegate !== \"object\") {\n            lifeCycleDelegate = {};\n        }\n\n        this.name = SchemaUtils.getTableNameFromSchema(schema);\n        this.database = database;\n        this.pgDatabaseWrapper = new PgWrapper(this.database);\n        this.primaryKeys = schema.primaryKeys;\n        this.lifeCycleDelegate = lifeCycleDelegate;\n    }\n\n    async addAsync(entity) {\n\n        await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"canEntityBeAddedAsync\",\n            [entity],\n            true\n        );\n\n        const alteredEntity = await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"prepareEntityToBeAddedAsync\",\n            [entity],\n            entity\n        );\n\n        const { sql, values } = InsertStatementCreator.createStatement({\n            tableName: this.name,\n            entity: alteredEntity,\n            primaryKeys: this.primaryKeys\n        });\n\n        const result = await this.pgDatabaseWrapper.runAsync(sql, values);\n\n        const inserted = result.rows[0];\n\n        return await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"entityAddedAsync\",\n            [alteredEntity, inserted],\n            inserted\n        );\n\n    }\n\n    async removeAsync(entity) {\n\n        await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"canEntityBeRemovedAsync\",\n            [entity],\n            true\n        );\n\n        const alteredEntity = await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"prepareEntityToBeRemovedAsync\",\n            [entity],\n            entity\n        );\n\n        const { sql, values } = DeleteStatementCreator.createStatement({\n            tableName: this.name,\n            entity: alteredEntity,\n            primaryKeys: this.primaryKeys\n        });\n\n        const result = await this.pgDatabaseWrapper.runAsync(sql, values);\n\n        return invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"entityRemovedAsync\",\n            [alteredEntity, result],\n            result\n        );\n\n    }\n\n    async updateAsync(entity) {\n        await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"canEntityBeUpdatedAsync\",\n            [entity],\n            true\n        );\n\n        const alteredEntity = await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"prepareEntityToBeUpdatedAsync\",\n            [entity],\n            entity\n        );\n\n        const { sql, values } = UpdateStatementCreator.createStatement({\n            tableName: this.name,\n            entity: alteredEntity,\n            primaryKeys: this.primaryKeys\n        });\n\n        const result = await this.pgDatabaseWrapper.runAsync(sql, values);\n\n        return await invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"entityUpdatedAsync\",\n            [alteredEntity, result],\n            result\n        );\n\n    }\n\n    getQueryProvider() {\n        return new Provider({\n            database: this.database,\n            lifeCycleDelegate: this.lifeCycleDelegate\n        });\n    }\n\n    where() {\n        const provider = this.getQueryProvider();\n\n        return new Queryable({\n            query: {\n                type: this.name,\n                expression: null,\n                select: {},\n                limit: \"ALL\",\n                offset: 0,\n                orderBy: []\n            },\n            provider: provider\n        });\n    }\n\n}"],"file":"Table.js"}