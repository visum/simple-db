{"version":3,"sources":["../../../src/postgresql/visitors/SqlVisitor.js"],"names":["SqlVisitor","Visitor","and","args","length","join","or","endsWith","property","value","toEndsWithString","startsWith","toStartsWithString","contains","toContainsString","isEqualTo","toString","isNotEqualTo","isGreaterThan","isGreaterThanOrEqualTo","isLessThan","isLessThanOrEqualTo","isIn","isNotIn","queryable","Queryable","fromObject","selectStatementCreator","SelectStatementCreator","sql","createStatement","string","Error","SqlString","boolean","number","date","getTime","array","Array","isArray","series","map","item","Date","propertyName","name","PgSQLUtils","escapeName","type","table","createWhereExpression","node","where","visit"],"mappings":"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","sourcesContent":["import Visitor from \"./Visitor\";\nimport SelectStatementCreator from \"../statements/SelectStatementCreator\";\nimport PgSQLUtils from \"../utils/PostgreSQLUtils\";\nimport Queryable from \"../../queryable/Queryable\";\nimport SqlString from \"./SqlString\";\n\nexport default class SqlVisitor extends Visitor {\n    and(...args) {\n        if (args.length === 0) {\n            return \"\";\n        }\n\n        return `(${args.join(\" AND \")})`;\n    }\n\n    or(...args) {\n        if (args.length === 0) {\n            return \"\";\n        }\n\n        return `(${args.join(\" OR \")})`;\n    }\n\n    endsWith(property, value) {\n        return `${property} LIKE ${value.toEndsWithString()}`;\n    }\n\n    startsWith(property, value) {\n        return `${property} LIKE ${value.toStartsWithString()}`;\n    }\n\n    contains(property, value) {\n        return `${property} LIKE ${value.toContainsString()}`;\n    }\n\n    isEqualTo(property, value) {\n        return `${property} = ${value.toString()}`;\n    }\n\n    isNotEqualTo(property, value) {\n        return `${property} != ${value.toString()}`;\n    }\n\n    isGreaterThan(property, value) {\n        return `${property} > ${value.toString()}`;\n    }\n\n    isGreaterThanOrEqualTo(property, value) {\n        return `${property} >= ${value.toString()}`;\n    }\n\n    isLessThan(property, value) {\n        return `${property} < ${value.toString()}`;\n    }\n\n    isLessThanOrEqualTo(property, value) {\n        return `${property} <= ${value.toString()}`;\n    }\n\n    isIn(property, value) {\n        return `${property} IN ${value}`;\n    }\n\n    isNotIn(property, value) {\n        return `${property} NOT IN ${value}`;\n    }\n\n    queryable(value) {\n        const queryable = Queryable.fromObject(value);\n\n        const selectStatementCreator = new SelectStatementCreator(queryable);\n        const { sql } = selectStatementCreator.createStatement();\n        return `(${sql})`;\n    }\n\n    string(value) {\n        if (typeof value !== \"string\") {\n            throw new Error(\"Invalid string value.\");\n        }\n\n        return new SqlString(value);\n    }\n\n    boolean(value) {\n        if (typeof value !== \"boolean\") {\n            throw new Error(\"Invalid boolean value.\");\n        }\n\n        return value.toString();\n    }\n\n    number(value) {\n        if (typeof value !== \"number\") {\n            throw new Error(\"Invalid number value.\");\n        }\n\n        return value;\n    }\n\n    date(value) {\n        if (!(value instanceof value)) {\n            throw new Error(\"Invalid date value.\");\n        }\n\n        return value.getTime();\n    }\n\n    array(value) {\n        if (!Array.isArray(value)) {\n            throw new Error(\"Invalid array value.\");\n        }\n\n        const series = value.map((item) => {\n\n            if (typeof item === \"string\") {\n                return this.string(item).toString();\n            } else if (typeof item === \"number\") {\n                return this.number(item);\n            } else if (typeof item === \"boolean\") {\n                return this.boolean(item);\n            } else if (item instanceof Date) {\n                return this.date(item);\n            } else {\n                throw new Error(\"Invalid Argument: Unknown primitive type.\");\n            }\n\n        }).join(\", \");\n\n        return `(${series})`;\n    }\n\n    propertyName(name) {\n        return PgSQLUtils.escapeName(name);\n    }\n\n    property(type, name) {\n        return name;\n    }\n\n    type(value) {\n        this.table = value;\n        return value;\n    }\n\n    createWhereExpression(node) {\n\n        const where = this.visit(node);\n\n        if (where == null) {\n            return \"\";\n        }\n\n        return `WHERE ${where}`;\n\n    }\n}\n"],"file":"SqlVisitor.js"}