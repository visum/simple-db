{"version":3,"sources":["../../src/postgresql/TableCreator.js"],"names":["TableCreator","constructor","database","schema","pgDatabaseWrapper","PgWrapper","schemaToPGFactory","TableStatementCreator","createTableIfNotExistsAsync","tableCreator","createTablesIfNotExistsAsync","schemas","promises","map","Promise","all","dropTableIfExistsAsync","dropTablesIfExistsAsync","sql","values","createTableStatement","runAsync","createDropTableStatment"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,YAAN,CAAmB;AAC9BC,EAAAA,WAAW,CAAC;AACRC,IAAAA,QADQ;AAERC,IAAAA;AAFQ,GAAD,EAGR;AACC,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,iBAAL,GAAyB,IAAIC,kBAAJ,CAAcH,QAAd,CAAzB;AACA,SAAKI,iBAAL,GAAyB,IAAIC,8BAAJ,CAA0BJ,MAA1B,CAAzB;AACH;;AAED,eAAaK,2BAAb,CAAyC;AAAEN,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAzC,EAA+D;AAC3D,UAAMM,YAAY,GAAG,IAAIT,YAAJ,CAAiB;AAClCE,MAAAA,QAAQ,EAAEA,QADwB;AAElCC,MAAAA;AAFkC,KAAjB,CAArB;AAKA,WAAO,MAAMM,YAAY,CAACD,2BAAb,EAAb;AACH;;AAED,eAAaE,4BAAb,CAA0C;AAAER,IAAAA,QAAF;AAAYS,IAAAA;AAAZ,GAA1C,EAAiE;AAC7D,UAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAR,CAAaV,MAAD,IAAY;AACrC,YAAMM,YAAY,GAAG,IAAIT,YAAJ,CAAiB;AAClCE,QAAAA,QAAQ,EAAEA,QADwB;AAElCC,QAAAA;AAFkC,OAAjB,CAArB;AAKA,aAAOM,YAAY,CAACD,2BAAb,EAAP;AACH,KAPgB,CAAjB;AASA,WAAO,MAAMM,OAAO,CAACC,GAAR,CAAYH,QAAZ,CAAb;AACH;;AAED,eAAaI,sBAAb,CAAoC;AAAEd,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAApC,EAA0D;AACtD,UAAMM,YAAY,GAAG,IAAIT,YAAJ,CAAiB;AAClCE,MAAAA,QAAQ,EAAEA,QADwB;AAElCC,MAAAA;AAFkC,KAAjB,CAArB;AAKA,WAAO,MAAMM,YAAY,CAACO,sBAAb,EAAb;AACH;;AAED,eAAaC,uBAAb,CAAqC;AAAEf,IAAAA,QAAF;AAAYS,IAAAA;AAAZ,GAArC,EAA4D;AAExD,UAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAR,CAAaV,MAAD,IAAY;AACrC,YAAMM,YAAY,GAAG,IAAIT,YAAJ,CAAiB;AAClCE,QAAAA,QAAQ,EAAEA,QADwB;AAElCC,QAAAA;AAFkC,OAAjB,CAArB;AAKA,aAAOM,YAAY,CAACO,sBAAb,EAAP;AACH,KAPgB,CAAjB;AASA,WAAO,MAAMF,OAAO,CAACC,GAAR,CAAYH,QAAZ,CAAb;AACH;;AAED,QAAMJ,2BAAN,GAAoC;AAChC,UAAM;AACFU,MAAAA,GADE;AAEFC,MAAAA;AAFE,QAGF,KAAKb,iBAAL,CAAuBc,oBAAvB,EAHJ;AAKA,WAAO,MAAM,KAAKhB,iBAAL,CAAuBiB,QAAvB,CAAgCH,GAAhC,EAAqCC,MAArC,CAAb;AACH;;AAED,QAAMH,sBAAN,GAA+B;AAC3B,UAAM;AACFE,MAAAA,GADE;AAEFC,MAAAA;AAFE,QAGF,KAAKb,iBAAL,CAAuBgB,uBAAvB,EAHJ;AAKA,WAAO,MAAM,KAAKlB,iBAAL,CAAuBiB,QAAvB,CAAgCH,GAAhC,EAAqCC,MAArC,CAAb;AACH;;AAxE6B","sourcesContent":["import PgWrapper from \"./PgWrapper\";\nimport TableStatementCreator from \"./statements/TableStatementCreator\";\n\nexport default class TableCreator {\n    constructor({\n        database,\n        schema\n    }) {\n        this.database = database;\n        this.schema = schema;\n        this.pgDatabaseWrapper = new PgWrapper(database);\n        this.schemaToPGFactory = new TableStatementCreator(schema);\n    }\n\n    static async createTableIfNotExistsAsync({ database, schema }) {\n        const tableCreator = new TableCreator({\n            database: database,\n            schema\n        });\n\n        return await tableCreator.createTableIfNotExistsAsync();\n    }\n\n    static async createTablesIfNotExistsAsync({ database, schemas }) {\n        const promises = schemas.map((schema) => {\n            const tableCreator = new TableCreator({\n                database: database,\n                schema\n            });\n\n            return tableCreator.createTableIfNotExistsAsync();\n        });\n\n        return await Promise.all(promises);\n    }\n\n    static async dropTableIfExistsAsync({ database, schema }) {\n        const tableCreator = new TableCreator({\n            database: database,\n            schema\n        });\n\n        return await tableCreator.dropTableIfExistsAsync();\n    }\n\n    static async dropTablesIfExistsAsync({ database, schemas }) {\n\n        const promises = schemas.map((schema) => {\n            const tableCreator = new TableCreator({\n                database: database,\n                schema\n            });\n\n            return tableCreator.dropTableIfExistsAsync();\n        });\n\n        return await Promise.all(promises);\n    }\n\n    async createTableIfNotExistsAsync() {\n        const {\n            sql,\n            values\n        } = this.schemaToPGFactory.createTableStatement();\n\n        return await this.pgDatabaseWrapper.runAsync(sql, values);\n    }\n\n    async dropTableIfExistsAsync() {\n        const {\n            sql,\n            values\n        } = this.schemaToPGFactory.createDropTableStatment();\n\n        return await this.pgDatabaseWrapper.runAsync(sql, values);\n    }\n}"],"file":"TableCreator.js"}