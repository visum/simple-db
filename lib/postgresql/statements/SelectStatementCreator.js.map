{"version":3,"sources":["../../../src/postgresql/statements/SelectStatementCreator.js"],"names":["SelectStatementCreator","constructor","queryable","Error","createStatement","selectStatementCreator","getTableName","PgSQLUtils","escapeName","query","type","removeNullOrEmptyStrings","expression","filter","part","length","createWhereExpression","visitor","SqlVisitor","createSelectSql","select","columns","Object","keys","map","key","join","createOrderBySql","orderBy","series","column","createLimitAndOffsetSql","limit","offset","selectSql","whereSql","orderBySql","limitAndOffsetSql","push","cleanedExpression","sql","values"],"mappings":"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","sourcesContent":["import SqlVisitor from \"../visitors/SqlVisitor\";\nimport PgSQLUtils from \"../utils/PostgreSQLUtils\";\n\nexport default class SelectStatementCreator {\n    constructor(queryable) {\n\n        if (queryable == null) {\n            throw new Error(\"Null Exception: A queryable is needed to create statement.\");\n        }\n\n        this.queryable = queryable;\n    }\n\n    static createStatement(queryable){\n        const selectStatementCreator = new SelectStatementCreator(queryable);\n        return selectStatementCreator.createStatement();\n    }\n\n    getTableName(){\n        return PgSQLUtils.escapeName(this.queryable.query.type);\n    }\n\n    removeNullOrEmptyStrings(expression) {\n        return expression.filter((part) => {\n            return typeof part === \"string\" && part.length > 0;\n        });\n    }\n\n    createWhereExpression() {\n        const visitor = new SqlVisitor();\n        return visitor.createWhereExpression(this.queryable.query.expression);\n    }\n\n    createSelectSql() {\n        const select = this.queryable.query.select;\n        let columns = Object.keys(select).map((key) => {\n            return `\"${key}\" AS ${select[key]}`;\n        });\n\n        if (columns.length === 0) {\n            columns = [\"*\"];\n        }\n\n        return `SELECT ${columns.join(\", \")} FROM ${this.getTableName()}`;\n    }\n\n    createOrderBySql() {\n        if (this.queryable.query.orderBy.length === 0) {\n            return \"\";\n        }\n\n        const series = this.queryable.query.orderBy.map((orderBy) => {\n            return `${PgSQLUtils.escapeName(orderBy.column)} ${orderBy.type}`;\n        }).join(\", \");\n\n        return `ORDER BY ${series}`;\n    }\n\n    createLimitAndOffsetSql() {\n        let limit = this.queryable.query.limit;\n        let offset = this.queryable.query.offset;\n\n        return `LIMIT ${limit} OFFSET ${offset}`;\n    }\n\n    createStatement() {\n        const selectSql = this.createSelectSql();\n        const whereSql = this.createWhereExpression();\n        const orderBySql = this.createOrderBySql();\n        const limitAndOffsetSql = this.createLimitAndOffsetSql();\n        const expression = [];\n\n        expression.push(selectSql);\n\n        if (whereSql != \"\") {\n            expression.push(whereSql);\n        }\n\n        if (orderBySql != \"\") {\n            expression.push(orderBySql);\n        }\n\n        if (limitAndOffsetSql != \"\") {\n            expression.push(limitAndOffsetSql);\n        }\n\n        const cleanedExpression = this.removeNullOrEmptyStrings(expression);\n\n        return {\n            sql: cleanedExpression.join(\" \"),\n            values: []\n        }\n    }\n\n}"],"file":"SelectStatementCreator.js"}