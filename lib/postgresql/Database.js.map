{"version":3,"sources":["../../src/postgresql/Database.js"],"names":["Database","constructor","database","schemas","Array","isArray","hasSchema","schema","getSchema","removeSchema","index","findIndex","name","innerSchema","version","splice","find","getSchemas","slice","addSchema","push","removeAsync","createTableFromSchemaAsync","TableCreator","createTableIfNotExistsAsync","createTablesFromSchemasAsync","reduce","promise","then","Promise","resolve","dropTableFromSchemaAsync","dropTableIfExistsAsync","getTable","lifeCycleDelegate","Error","Table"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,QAAN,CAAe;AAC1BC,EAAAA,WAAW,CAAC;AACRC,IAAAA,QADQ;AAERC,IAAAA;AAFQ,GAAD,EAGR;AACC,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeC,KAAK,CAACC,OAAN,CAAcF,OAAd,IAAyBA,OAAzB,GAAmC,EAAlD;AACH;;AAEDG,EAAAA,SAAS,CAACC,MAAD,EAAS;AACd,WAAO,KAAKC,SAAL,CAAeD,MAAf,KAA0B,IAAjC;AACH;;AAEDE,EAAAA,YAAY,CAACF,MAAD,EAAS;AACjB,UAAMG,KAAK,GAAG,KAAKP,OAAL,CAAaQ,SAAb,CAAuB,MAAM;AACvC,aAAOJ,MAAM,CAACK,IAAP,IAAeC,WAAf,IAA8BN,MAAM,CAACO,OAAP,IAAkBD,WAAW,CAACC,OAAnE;AACH,KAFa,CAAd;;AAIA,QAAIJ,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,WAAKP,OAAL,CAAaY,MAAb,CAAoBL,KAApB,EAA2B,CAA3B;AACH;AACJ;;AAEDF,EAAAA,SAAS,CAACD,MAAD,EAAS;AACd,WAAO,KAAKJ,OAAL,CAAaa,IAAb,CAAmBH,WAAD,IAAiB;AACtC,aAAON,MAAM,CAACK,IAAP,IAAeC,WAAW,CAACD,IAA3B,IAAmCL,MAAM,CAACO,OAAP,IAAkBD,WAAW,CAACC,OAAxE;AACH,KAFM,CAAP;AAGH;;AAEDG,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKd,OAAL,CAAae,KAAb,CAAmB,CAAnB,CAAP;AACH;;AAEDC,EAAAA,SAAS,CAACZ,MAAD,EAAS;AACd,SAAKJ,OAAL,CAAaiB,IAAb,CAAkBb,MAAlB;AACH;;AAEDc,EAAAA,WAAW,CAACd,MAAD,EAAS;AAChB,SAAKE,YAAL,CAAkBF,MAAlB;AACH;;AAED,QAAMe,0BAAN,CAAiCf,MAAjC,EAAyC;AACrC,WAAO,MAAMgB,sBAAaC,2BAAb,CAAyC;AAClDtB,MAAAA,QAAQ,EAAE,KAAKA,QADmC;AAElDK,MAAAA;AAFkD,KAAzC,CAAb;AAIH;;AAED,QAAMkB,4BAAN,GAAqC;AACjC,WAAO,MAAM,KAAKtB,OAAL,CAAauB,MAAb,CAAoB,CAACC,OAAD,EAAUpB,MAAV,KAAqB;AAClD,aAAOoB,OAAO,CAACC,IAAR,CAAa,MAAM;AACtB,eAAO,KAAKN,0BAAL,CAAgCf,MAAhC,CAAP;AACH,OAFM,CAAP;AAGH,KAJY,EAIVsB,OAAO,CAACC,OAAR,EAJU,CAAb;AAKH;;AAED,QAAMC,wBAAN,CAA+BxB,MAA/B,EAAuC;AACnC,WAAO,MAAMgB,sBAAaS,sBAAb,CAAoC;AAC7C9B,MAAAA,QAAQ,EAAE,KAAKA,QAD8B;AAE7CK,MAAAA;AAF6C,KAApC,CAAb;AAIH;;AAED0B,EAAAA,QAAQ,CAAC;AAAErB,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBoB,IAAAA;AAAjB,GAAD,EAAuC;AAC3C,UAAM3B,MAAM,GAAG,KAAKC,SAAL,CAAe;AAAEI,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAAf,CAAf;;AAEA,QAAIP,MAAM,IAAI,IAAd,EAAoB;AAChB,YAAM,IAAI4B,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAED,UAAMjC,QAAQ,GAAG,KAAKA,QAAtB;AAEA,WAAO,IAAIkC,cAAJ,CAAU;AACblC,MAAAA,QAAQ,EAAEA,QADG;AAEbK,MAAAA,MAFa;AAGb2B,MAAAA;AAHa,KAAV,CAAP;AAMH;;AA9EyB","sourcesContent":["import TableCreator from \"./TableCreator\";\nimport Table from \"./Table\";\n\nexport default class Database {\n    constructor({\n        database,\n        schemas\n    }) {\n        this.database = database;\n        this.schemas = Array.isArray(schemas) ? schemas : [];\n    }\n\n    hasSchema(schema) {\n        return this.getSchema(schema) != null;\n    }\n\n    removeSchema(schema) {\n        const index = this.schemas.findIndex(() => {\n            return schema.name == innerSchema && schema.version == innerSchema.version;\n        });\n\n        if (index > -1) {\n            this.schemas.splice(index, 1);\n        }\n    }\n\n    getSchema(schema) {\n        return this.schemas.find((innerSchema) => {\n            return schema.name == innerSchema.name && schema.version == innerSchema.version;\n        });\n    }\n\n    getSchemas() {\n        return this.schemas.slice(0);\n    }\n\n    addSchema(schema) {\n        this.schemas.push(schema);\n    }\n\n    removeAsync(schema) {\n        this.removeSchema(schema);\n    }\n\n    async createTableFromSchemaAsync(schema) {\n        return await TableCreator.createTableIfNotExistsAsync({\n            database: this.database,\n            schema\n        });\n    }\n\n    async createTablesFromSchemasAsync() {\n        return await this.schemas.reduce((promise, schema) => {\n            return promise.then(() => {\n                return this.createTableFromSchemaAsync(schema);\n            })\n        }, Promise.resolve());\n    }\n\n    async dropTableFromSchemaAsync(schema) {\n        return await TableCreator.dropTableIfExistsAsync({\n            database: this.database,\n            schema\n        });\n    }\n\n    getTable({ name, version, lifeCycleDelegate }) {\n        const schema = this.getSchema({ name, version });\n\n        if (schema == null) {\n            throw new Error(\"Unable to find table.\");\n        }\n\n        const database = this.database;\n\n        return new Table({\n            database: database,\n            schema,\n            lifeCycleDelegate\n        });\n\n    }\n\n}"],"file":"Database.js"}